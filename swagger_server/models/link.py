# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.port import Port  # noqa: F401,E501
from swagger_server import util


class Link(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, short_name: str=None, ports: List[Port]=None):  # noqa: E501
        """Link - a model defined in Swagger

        :param id: The id of this Link.  # noqa: E501
        :type id: str
        :param name: The name of this Link.  # noqa: E501
        :type name: str
        :param short_name: The short_name of this Link.  # noqa: E501
        :type short_name: str
        :param ports: The ports of this Link.  # noqa: E501
        :type ports: List[Port]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'short_name': str,
            'ports': List[Port]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'short_name': 'short_name',
            'ports': 'ports'
        }
        self._id = id
        self._name = name
        self._short_name = short_name
        self._ports = ports

    @classmethod
    def from_dict(cls, dikt) -> 'Link':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The link of this Link.  # noqa: E501
        :rtype: Link
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Link.


        :return: The id of this Link.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Link.


        :param id: The id of this Link.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Link.


        :return: The name of this Link.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Link.


        :param name: The name of this Link.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def short_name(self) -> str:
        """Gets the short_name of this Link.


        :return: The short_name of this Link.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name: str):
        """Sets the short_name of this Link.


        :param short_name: The short_name of this Link.
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def ports(self) -> List[Port]:
        """Gets the ports of this Link.


        :return: The ports of this Link.
        :rtype: List[Port]
        """
        return self._ports

    @ports.setter
    def ports(self, ports: List[Port]):
        """Sets the ports of this Link.


        :param ports: The ports of this Link.
        :type ports: List[Port]
        """

        self._ports = ports
