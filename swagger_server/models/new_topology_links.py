""" new topology link class """
# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
import re  # noqa: F401,E501
from swagger_server import util


class NewTopologyLinks(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, ports: List[str]=None, type: str=None, bandwidth: float=None, residual_bandwidth: float=None, latency: float=None, packet_loss: float=None, availability: float=None, status: str=None, state: str=None):  # noqa: E501
        """NewTopologyLinks - a model defined in Swagger

        :param id: The id of this NewTopologyLinks.  # noqa: E501
        :type id: str
        :param name: The name of this NewTopologyLinks.  # noqa: E501
        :type name: str
        :param ports: The ports of this NewTopologyLinks.  # noqa: E501
        :type ports: List[str]
        :param type: The type of this NewTopologyLinks.  # noqa: E501
        :type type: str
        :param bandwidth: The bandwidth of this NewTopologyLinks.  # noqa: E501
        :type bandwidth: float
        :param residual_bandwidth: The residual_bandwidth of this NewTopologyLinks.  # noqa: E501
        :type residual_bandwidth: float
        :param latency: The latency of this NewTopologyLinks.  # noqa: E501
        :type latency: float
        :param packet_loss: The packet_loss of this NewTopologyLinks.  # noqa: E501
        :type packet_loss: float
        :param availability: The availability of this NewTopologyLinks.  # noqa: E501
        :type availability: float
        :param status: The status of this NewTopologyLinks.  # noqa: E501
        :type status: str
        :param state: The state of this NewTopologyLinks.  # noqa: E501
        :type state: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'ports': List[str],
            'type': str,
            'bandwidth': float,
            'residual_bandwidth': float,
            'latency': float,
            'packet_loss': float,
            'availability': float,
            'status': str,
            'state': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'ports': 'ports',
            'type': 'type',
            'bandwidth': 'bandwidth',
            'residual_bandwidth': 'residual_bandwidth',
            'latency': 'latency',
            'packet_loss': 'packet_loss',
            'availability': 'availability',
            'status': 'status',
            'state': 'state'
        }
        self._id = id
        self._name = name
        self._ports = ports
        self._type = type
        self._bandwidth = bandwidth
        self._residual_bandwidth = residual_bandwidth
        self._latency = latency
        self._packet_loss = packet_loss
        self._availability = availability
        self._status = status
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'NewTopologyLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewTopology_links of this NewTopologyLinks.  # noqa: E501
        :rtype: NewTopologyLinks
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this NewTopologyLinks.


        :return: The id of this NewTopologyLinks.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this NewTopologyLinks.


        :param id: The id of this NewTopologyLinks.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this NewTopologyLinks.


        :return: The name of this NewTopologyLinks.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this NewTopologyLinks.


        :param name: The name of this NewTopologyLinks.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ports(self) -> List[str]:
        """Gets the ports of this NewTopologyLinks.


        :return: The ports of this NewTopologyLinks.
        :rtype: List[str]
        """
        return self._ports

    @ports.setter
    def ports(self, ports: List[str]):
        """Sets the ports of this NewTopologyLinks.


        :param ports: The ports of this NewTopologyLinks.
        :type ports: List[str]
        """
        if ports is None:
            raise ValueError("Invalid value for `ports`, must not be `None`")  # noqa: E501

        self._ports = ports

    @property
    def type(self) -> str:
        """Gets the type of this NewTopologyLinks.


        :return: The type of this NewTopologyLinks.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this NewTopologyLinks.


        :param type: The type of this NewTopologyLinks.
        :type type: str
        """
        allowed_values = ["intra", "inter"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def bandwidth(self) -> float:
        """Gets the bandwidth of this NewTopologyLinks.


        :return: The bandwidth of this NewTopologyLinks.
        :rtype: float
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth: float):
        """Sets the bandwidth of this NewTopologyLinks.


        :param bandwidth: The bandwidth of this NewTopologyLinks.
        :type bandwidth: float
        """
        if bandwidth is None:
            raise ValueError("Invalid value for `bandwidth`, must not be `None`")  # noqa: E501

        self._bandwidth = bandwidth

    @property
    def residual_bandwidth(self) -> float:
        """Gets the residual_bandwidth of this NewTopologyLinks.


        :return: The residual_bandwidth of this NewTopologyLinks.
        :rtype: float
        """
        return self._residual_bandwidth

    @residual_bandwidth.setter
    def residual_bandwidth(self, residual_bandwidth: float):
        """Sets the residual_bandwidth of this NewTopologyLinks.


        :param residual_bandwidth: The residual_bandwidth of this NewTopologyLinks.
        :type residual_bandwidth: float
        """

        self._residual_bandwidth = residual_bandwidth

    @property
    def latency(self) -> float:
        """Gets the latency of this NewTopologyLinks.


        :return: The latency of this NewTopologyLinks.
        :rtype: float
        """
        return self._latency

    @latency.setter
    def latency(self, latency: float):
        """Sets the latency of this NewTopologyLinks.


        :param latency: The latency of this NewTopologyLinks.
        :type latency: float
        """

        self._latency = latency

    @property
    def packet_loss(self) -> float:
        """Gets the packet_loss of this NewTopologyLinks.


        :return: The packet_loss of this NewTopologyLinks.
        :rtype: float
        """
        return self._packet_loss

    @packet_loss.setter
    def packet_loss(self, packet_loss: float):
        """Sets the packet_loss of this NewTopologyLinks.


        :param packet_loss: The packet_loss of this NewTopologyLinks.
        :type packet_loss: float
        """

        self._packet_loss = packet_loss

    @property
    def availability(self) -> float:
        """Gets the availability of this NewTopologyLinks.


        :return: The availability of this NewTopologyLinks.
        :rtype: float
        """
        return self._availability

    @availability.setter
    def availability(self, availability: float):
        """Sets the availability of this NewTopologyLinks.


        :param availability: The availability of this NewTopologyLinks.
        :type availability: float
        """

        self._availability = availability

    @property
    def status(self) -> str:
        """Gets the status of this NewTopologyLinks.


        :return: The status of this NewTopologyLinks.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this NewTopologyLinks.


        :param status: The status of this NewTopologyLinks.
        :type status: str
        """
        allowed_values = ["up", "down", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def state(self) -> str:
        """Gets the state of this NewTopologyLinks.


        :return: The state of this NewTopologyLinks.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this NewTopologyLinks.


        :param state: The state of this NewTopologyLinks.
        :type state: str
        """
        allowed_values = ["enabled", "disabled", "maintenance"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
