openapi: 3.0.0
info:
  title: SDX LC
  description: SDX Topology validation
  contact:
    email: lmarinve@fiu.edu
  version: 2.0.0
servers:
- url: /sdx/v2
tags:
- name: topology
  description: Everything about your domain topology
  externalDocs:
    description: Find out more
    url: https://www.atlanticwave-sdx.net
- name: node
  description: everything about a node in your domain
- name: link
  description: everything about a link in your domain
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: https://www.atlanticwave-sdx.net
paths:
  /topology:
    get:
      tags:
      - topology
      description: |
        Returns topology from the system that the user has access to
      operationId: find_topology
      parameters:
      - name: tags
        in: query
        description: tags to filter by
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: limit
        in: query
        description: maximum number of results to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: topology response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topology'
                x-content-type: application/json
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      x-openapi-router-controller: swagger_server.controllers.topology_controller
    post:
      tags:
      - topology
      summary: Send a new topology to SDX-LC
      description: Create a topology
      operationId: add_topology
      requestBody:
        description: placed for adding a new topology
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTopology'
        required: true
      responses:
        "200":
          description: topology response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topology'
        "400":
          description: Invalid Connection
        "405":
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      x-openapi-router-controller: swagger_server.controllers.topology_controller
  /topology/{topologyId}:
    get:
      tags:
      - topology
      description: Info for a specific topology
      operationId: show_topology_by_id
      parameters:
      - name: topologyId
        in: path
        description: The id of the topology to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topology'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      x-openapi-router-controller: swagger_server.controllers.topology_controller
    delete:
      tags:
      - topology
      description: Delete a specific topology
      operationId: delete_topology
      parameters:
      - name: topologyId
        in: path
        description: The id of the topology to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: topology deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      x-openapi-router-controller: swagger_server.controllers.topology_controller
  /user:
    get:
      tags:
      - user
      description: |
        Returns users from the system that the user has access to
      operationId: find_user
      parameters:
      - name: tags
        in: query
        description: tags to filter by
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: limit
        in: query
        description: maximum number of results to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: users response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
        default:
          description: unexpected error
      x-openapi-router-controller: swagger_server.controllers.user_controller
    put:
      tags:
      - user
      summary: Update a user in SDX-LC
      description: Update a user
      operationId: update_user
      requestBody:
        description: placed for adding a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: Successfully updated user to the DB
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: "invalid input, object invalid"
        "408":
          description: "error, item not modified"
      x-openapi-router-controller: swagger_server.controllers.user_controller
    post:
      tags:
      - user
      summary: Create a new user to SDX-LC
      description: Create a user
      operationId: add_user
      requestBody:
        description: placed for adding a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        "200":
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: "invalid input, object invalid"
        "409":
          description: an existing item already exists
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/{user_id}:
    get:
      tags:
      - user
      description: Fetch a user from the database
      operationId: read_user
      parameters:
      - name: user_id
        in: path
        description: Numeric ID of the user to get.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Fetch a user from the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-openapi-router-controller: swagger_server.controllers.user_controller
    delete:
      tags:
      - user
      operationId: delete_user
      parameters:
      - name: user_id
        in: path
        description: Numeric ID of the user to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successfully deleted user
        "400":
          description: "invalid input, object invalid"
        "401":
          description: Not correctly authorized
        "409":
          description: conflict error
      x-openapi-router-controller: swagger_server.controllers.user_controller
components:
  schemas:
    Topology:
      allOf:
      - $ref: '#/components/schemas/NewTopology'
      - required:
        - id
        type: object
        properties:
          id:
            type: string
    NewTopology:
      required:
      - id
      - model_version
      - name
      - timestamp
      - version
      type: object
      properties:
        id:
          pattern: "^((urn:sdx:topology:)[A-Za-z_.:-]*$)"
          type: string
        name:
          maxLength: 30
          minLength: 3
          pattern: "^[A-Za-z_.-]*$"
          type: string
        version:
          type: integer
          format: int64
        model_version:
          type: string
        timestamp:
          type: string
          format: date-time
        nodes:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/NewTopology_nodes'
        links:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/NewTopology_links'
      additionalProperties: false
    port:
      required:
      - id
      - name
      - node
      - state
      - status
      - type
      type: object
      properties:
        id:
          pattern: "^((urn:sdx:port:)[A-Za-z_.-\\:]*$)"
          type: string
        name:
          maxLength: 30
          minLength: 3
          pattern: "^[A-Za-z0-9_.-]*$"
          type: string
        node:
          pattern: "^((urn:sdx:node:)[A-Za-z_.-\\:]*$)"
          type: string
        type:
          type: string
          enum:
          - 1GE
          - 10GE
          - 25GE
          - 40GE
          - 50GE
          - 100GE
          - 400GE
          - Other
        status:
          type: string
          enum:
          - up
          - down
          - error
        state:
          type: string
          enum:
          - enabled
          - disabled
        services:
          type: string
        nni:
          type: string
        mtu:
          type: integer
          format: int32
      additionalProperties: false
    location:
      required:
      - address
      - latitude
      - longitude
      type: object
      properties:
        address:
          type: string
        latitude:
          maximum: 90
          minimum: -90
          type: number
        longitude:
          maximum: 90
          minimum: -90
          type: number
    ErrorMessage:
      required:
      - error_code
      - error_message
      type: object
      properties:
        error_code:
          type: string
        error_message:
          type: string
    NewTopology_nodes:
      required:
      - id
      - location
      - name
      - ports
      type: object
      properties:
        id:
          pattern: "^((urn:sdx:node:)[A-Za-z_.-\\:]*$)"
          type: string
        name:
          maxLength: 30
          minLength: 3
          pattern: "^[A-Za-z0-9_.-]*$"
          type: string
        location:
          $ref: '#/components/schemas/location'
        ports:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/port'
      additionalProperties: false
    NewTopology_links:
      required:
      - bandwidth
      - id
      - name
      - ports
      - state
      - status
      - type
      type: object
      properties:
        id:
          pattern: "^((urn:sdx:link:)[A-Za-z_.-\\:]*$)"
          type: string
        name:
          maxLength: 30
          minLength: 3
          pattern: "^[A-Za-z0-9_.-/]*$"
          type: string
        ports:
          minItems: 1
          type: array
          additionalProperties: false
          items:
            pattern: "^((urn:sdx:port:)[A-Za-z_.-\\:]*$)"
            type: string
        type:
          type: string
          enum:
          - intra
          - inter
        bandwidth:
          maximum: 50000000000
          minimum: 125000000
          type: number
        residual_bandwidth:
          maximum: 100
          minimum: 0
          type: number
        latency:
          maximum: 50000000000
          minimum: 0
          type: number
        packet_loss:
          maximum: 100
          minimum: 0
          type: number
        availability:
          maximum: 100
          minimum: 0
          type: number
        status:
          type: string
          enum:
          - up
          - down
          - error
        state:
          type: string
          enum:
          - enabled
          - disabled
          - maintenance
      additionalProperties: false
    User:
      allOf:
      - $ref: '#/components/schemas/NewUser'
      - required:
        - id
        type: object
        properties:
          id:
            type: string
    NewUser:
      required:
      - id
      - username
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        password:
          type: string
      additionalProperties: false

